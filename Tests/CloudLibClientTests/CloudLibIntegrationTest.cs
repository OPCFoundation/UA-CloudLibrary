using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using Opc.Ua.Cloud.Client;
using Opc.Ua.Cloud.Client.Models;
using Xunit;
using Xunit.Abstractions;

[assembly: CLSCompliant(false)]
namespace CloudLibClient.Tests
{
    public class CloudLibSearch
    : IClassFixture<CustomWebApplicationFactory<Opc.Ua.Cloud.Library.Startup>>
    {
        private readonly CustomWebApplicationFactory<Opc.Ua.Cloud.Library.Startup> _factory;
        private readonly ITestOutputHelper output;

        private static readonly string[] item = ["http://opcfoundation.org/UA/ADI/"];
        private static readonly string[] itemArray = ["BaseObjectType"];
        private static readonly string[] itemArray0 = ["di"];
        private static readonly string[] itemArray1 = ["robotics"];
        private static readonly string[] itemArray2 = ["plastic"];
        private static readonly string[] itemArray3 = ["pump"];
        private static readonly string[] itemArray4 = ["robotics", "di"];
        private static readonly string[] itemArray5 = ["robotics", "di", "pump", "plastic"];
        private static readonly string[] itemArray6 = ["robotics", "pump",];
        private static readonly string[] itemArray7 = ["robotics", "plastic"];
        private static readonly string[] itemArray8 = ["robotics", "pump", "plastic"];
        private static readonly string[] itemArray9 = ["abcdefg", "defghi", "dhjfhsdjfhsdjkfhsdjkf", "dfsjdhfjkshdfjksd"];
        private static readonly string[] itemArray10 = ["Interface"];
        private static readonly string[] itemArray11 = ["Event"];
        private static readonly string[] itemArray12 = ["Interface", "BaseObjectType"];
        private static readonly string[] itemArray13 = ["BaseObjectType", "Interface"];
        private static readonly string[] itemArray14 = ["Interface", "BaseObjectType", "Event"];

        public CloudLibSearch(CustomWebApplicationFactory<Opc.Ua.Cloud.Library.Startup> factory, ITestOutputHelper output)
        {
            _factory = factory;
            this.output = output;
        }
        [Theory]
        [MemberData(nameof(TestKeywords))]
        public async Task Search(string[] keywords, int expectedCount)
        {
            UACloudLibClient apiClient = _factory.CreateCloudLibClient();

            ICollection<UANameSpace> nodeSets = await PagedVsNonPagedAsync(apiClient, keywords: keywords, after: null, first: 100).ConfigureAwait(true);
            output.WriteLine($"{nodeSets.Count}");
            // Ignore namespace versions for now: the only duplicate version is the test namespace generated by the QueriesAndDownload.UpdateNodeSet test, which may run before or after this test
            Assert.Equal(expectedCount, nodeSets.DistinctBy(n => n.Nodeset.NamespaceUri).Count());
        }

        private async Task<ICollection<UANameSpace>> PagedVsNonPagedAsync(UACloudLibClient apiClient, string[] keywords, string after, int first)
        {
            List<UANameSpace> unpagedResult = await apiClient.GetBasicNodesetInformationAsync(int.Parse(after, CultureInfo.InvariantCulture), first, keywords.ToList()).ConfigureAwait(true);
            var unpaged = unpagedResult;

            List<UANameSpace> paged = await GetAllPaged(apiClient, keywords: keywords, after: after, first: 5).ConfigureAwait(true);
            Assert.True(paged.Count == unpaged.Count);
            Assert.Equal(unpaged, paged, new NodesetComparer(output));

            var unpagedOrdered = unpaged.OrderBy(nsm => nsm.Nodeset.NamespaceUri).ThenBy(nsm => nsm.Nodeset.PublicationDate).ToList();
            Assert.Equal(unpagedOrdered, paged, new NodesetComparer(output));

            return unpaged;
        }

        private static async Task<List<UANameSpace>> GetAllPaged(UACloudLibClient apiClient, string[] keywords, string after, int first)
        {
            bool bComplete = false;
            var paged = new List<UANameSpace>();
            int cursor = int.Parse(after, CultureInfo.InvariantCulture);

            do
            {
                List<UANameSpace> page = await apiClient.GetBasicNodesetInformationAsync(int.Parse(after, CultureInfo.InvariantCulture), first, keywords.ToList()).ConfigureAwait(true);
                Assert.True(page.Count <= first, "CloudLibAsync returned more profiles than requested");
                paged.AddRange(page);
                if (page.Count == 0)
                {
                    bComplete = true;
                }
                cursor = page.Count;
            }
            while (!bComplete && paged.Count < 100);

            return paged;
        }

        public static IEnumerable<object[]> TestKeywords()
        {
            return new List<object[]>
            {
                new object[ ]{ null, 63 },
                new object[] { item, 1 },
                new object[] { itemArray,  6 },
                new object[] { itemArray0, 62 },
                new object[] { itemArray1, 1 },
                new object[] { itemArray2, 15 },
                new object[] { itemArray3, 6},
                new object[] { itemArray4, 62 },
                new object[] { itemArray5, 62 },
                new object[] { itemArray6, 7 },
                new object[] { itemArray7, 16 },
                new object[] { itemArray8, 19 },
                new object[] { itemArray9, 0 },
                new object[] { itemArray10, 24 },
                new object[] { itemArray11, 23 },
                new object[] { itemArray12, 28 },
                new object[] { itemArray13, 28 },
                new object[] { itemArray14, 40 },
            };
        }
    }

    internal sealed class NodesetComparer : IEqualityComparer<UANameSpace>
    {
        private readonly ITestOutputHelper _output;

        public NodesetComparer(ITestOutputHelper output)
        {
            _output = output;
        }
        public bool Equals(UANameSpace x, UANameSpace y)
        {
            bool equal = x.Nodeset.NamespaceUri == y.Nodeset.NamespaceUri && x.Nodeset.PublicationDate == y.Nodeset.PublicationDate;
            if (!equal)
            {
                _output?.WriteLine($"{x.Nodeset.NamespaceUri} {x.Nodeset.PublicationDate} vs. {y.Nodeset.NamespaceUri} {y.Nodeset.PublicationDate}");
            }
            return equal;
        }

        public int GetHashCode([DisallowNull] UANameSpace p)
        {
            return p.Nodeset.NamespaceUri.GetHashCode() + p.Nodeset.PublicationDate.GetHashCode();
        }
    }
}
