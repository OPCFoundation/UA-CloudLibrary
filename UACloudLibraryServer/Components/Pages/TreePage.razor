
@using System.Net
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Text.Json
@using System.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Http
@using AdminShell
@using Opc.Ua

@inject UAClient _client

<h1>@NodesetName</h1>
<div style="height:100%">
    <div class="uacl-container">
        <div class="uacl-content">
            <div class="container">
                <p>
                    <div class="col-12 row">
                        <div class="col-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <b>Loaded Nodesets</b><br/>
                                </div>
                                <div class="card-body">
                                    <span>http://opcfoundation.org/UA/</span><br/>
                                    @foreach (var ns in _client.LoadedNamespaces)
                                    {
                                        <span>@ns</span><br/>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <b>Required Nodesets Missing from UA Cloud Library</b><br/>
                                </div>
                                <div class="card-body">
                                    @if (_client.MissingNamespaces.Count == 0)
                                    {
                                        <span>(none)</span><br/>
                                    }
                                    else
                                    {
                                        foreach (var ns in _client.MissingNamespaces)
                                        {
                                            <span>@ns</span><br/>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </p>
                <p>
                    <div class="col-12 row">
                        <div class="col-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <b>Nodeset Browser</b>
                                </div>
                                <div class="card-body">
                                    <Tree Nodes="TreeNodes" TNode="NodesetViewerNode" ChildSelector="node => node.Children" SelectedNodeChanged="SelectedNodeChanged" OnNodeExpand="OnNodeExpand" HasChildNodes="HasChildNodes">
                                        <TitleTemplate>
                                            @if (context.Id == SelectedNode.Id)
                                            {
                                                if (context.Id.StartsWith("nsu="))
                                                {
                                                    <span style="color: red;"><b>@context.Text</b></span>
                                                }
                                                else
                                                {
                                                    <span style="color: red;">@context.Text</span>
                                                }
                                            }
                                            else
                                            {
                                                if (context.Id.StartsWith("nsu="))
                                                {
                                                    <span><b>@context.Text</b></span>
                                                }
                                                else
                                                {
                                                    <span>@context.Text</span>
                                                }
                                            }

                                        </TitleTemplate>
                                    </Tree>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <b><span style="color: red;">Selected Node</span> Value</b>
                                    <button type="button" class="btn btn-primary" style="float: right" @onclick="() => OpenEditDialog(NodeValue)">Edit</button>
                                </div>
                                <div class="card-body">
                                    @if (!string.IsNullOrEmpty(NodeValue))
                                    {
                                        <span>@NodeValue</span>
                                    }
                                    else
                                    {
                                        <span>(none)</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </p>
                <p>
                    <div class="col-12 row">
                        <div class="col-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <b>Nodeset File</b>
                                    <button type="button" class="btn btn-primary" style="float: right" @onclick="() => OpenCopyDialog()">Copy</button><br/>
                                    @CopyStatus
                                </div>
                            </div>
                        </div>
                    </div>
                </p>
            </div>
        </div>
    </div>
</div>

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
            </div>
            <div class="modal-body">
                @ModalDescription
            </div>
            <div class="modal-body">
                <input class="modal-input" @bind=@ModalValue />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close(true)">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close(false)">Cancel</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackDrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {

    [Parameter] public string NodesetIdentifier { get;set; }

    [Parameter] public string NodesetName { get; set; }

    [Parameter] public string UserName { get; set; }

    private string ModalClass = string.Empty;
    private string ModalDisplay = "display:none";
    private bool ShowBackDrop = false;

    private string ModalTitle = string.Empty;
    private string ModalDescription = string.Empty;
    private string ModalValue = string.Empty;

    private string CopyStatus = string.Empty;

    private List<NodesetViewerNode> TreeNodes = new();

    private string NodeValue { get; set; } = string.Empty;

    private NodesetViewerNode SelectedNode { get; set; } = null;

    private void OpenEditDialog(string value)
    {
        ModalDisplay = "display:block;";
        ModalClass = "Show";
        ShowBackDrop = true;

        ModalTitle = "Edit";
        ModalDescription = "Edit node value";
        ModalValue = value;

        StateHasChanged();
    }

    private void OpenCopyDialog()
    {
        ModalDisplay = "display:block;";
        ModalClass = "Show";
        ShowBackDrop = true;

        ModalTitle = "Copy";
        ModalDescription = "New nodeset name";
        ModalValue = NodesetName;

        StateHasChanged();
    }

    private async Task Close(bool save)
    {
        ModalDisplay = "display:none";
        ModalClass = "";
        ShowBackDrop = false;

        if ((ModalTitle == "Edit") && save)
        {
            await _client.VariableWrite(UserName, NodesetIdentifier, SelectedNode.Id, ModalValue).ConfigureAwait(false);
            NodeValue = await _client.VariableRead(UserName, NodesetIdentifier, SelectedNode.Id).ConfigureAwait(false);
        }

        if ((ModalTitle == "Copy") && save)
        {
            CopyStatus = await _client.CopyNodeset(UserName, NodesetIdentifier, ModalValue).ConfigureAwait(false);
        }

        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        TreeNodes.Clear();

        NodesetViewerNode root = new NodesetViewerNode()
        {
            Id = ObjectIds.RootFolder.ToString(),
            Text = "Root",
            Children = new List<NodesetViewerNode>()
        };

        TreeNodes.Add(root);
        SelectedNode = root;

        await OnNodeExpand(root).ConfigureAwait(false);
    }

    private async Task OnNodeExpand(NodesetViewerNode node)
    {
        if (node.Children.Count == 0)
        {
            node.Children = await _client.GetChildren(UserName, NodesetIdentifier, node.Id).ConfigureAwait(false);

            if (node.Children != null)
            {
                node.Children.Sort();
            }
        }
    }

    private async Task SelectedNodeChanged(NodesetViewerNode node)
    {
        SelectedNode = node;

        NodeValue = await _client.VariableRead(UserName, NodesetIdentifier, node.Id).ConfigureAwait(false);
    }

    private bool HasChildNodes(NodesetViewerNode node)
    {
        return (node.Children != null);
    }

    private string ViewNodeType(NodesetViewerNode item)
    {
        return (item == null)? string.Empty : item.Id;
    }

    private string ViewNodeInfo(NodesetViewerNode item)
    {
        return (item == null)? string.Empty : item.Text;
    }
}

<style>
    .uacl-content .card .card-text {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .page-item {
        cursor: pointer;
    }
</style>
