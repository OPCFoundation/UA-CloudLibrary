@* /* ========================================================================
 * Copyright (c) 2005-2025 The OPC Foundation, Inc. All rights reserved.
 *
 * OPC Foundation MIT License 1.00
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The complete license agreement can be found here:
 * http://opcfoundation.org/License/MIT/1.00/
 * ======================================================================*/ *@

@using System.Net
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Text.Json
@using System.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@using Opc.Ua.Cloud.Library.Models
@using System.Security.Claims

@inject IJSRuntime JS
@inject CloudLibDataProvider DataProvider
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div style="height:100%">
    <div class="uacl-container">
        <div class="uacl-content">
            <div class="container">
                @if (Loading)
                {
                    <div class="mt-5 mb-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden"></span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">Search</span>
                        </div>
                        <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" value="@string.Join(",", SearchKeywords)" @onchange="@OnSearchTextChanged">
                    </div>
                    @for (int row = 0; row < Math.Ceiling(Result.Count / (double)COL_SIZE); ++row)
                    {
                        <div class="row">
                            @for (int i = row * COL_SIZE; i < (row + 1) * COL_SIZE; ++i)
                            {
                                <div class="col-lg pt-3">
                                    @if (i < Result.Count)
                                    {
                                        var item = Result[i];
                                        <div class="card h-100">
                                            <div class="card-header">
                                                @if (!string.IsNullOrEmpty(@item.Title))
                                                {
                                                    <span class="badge badge-primary float-right">@item.Title</span>
                                                }
                                                <h5 class="card-title">@item.Title</h5>
                                                <h6 class="card-subtitle mb-2 text-muted">by @item.Title</h6>
                                            </div>
                                            <div class="card-body">
                                                <p class="card-text">
                                                    @item.Description
                                                </p>
                                                <div class="card-text-footer">
                                                    <div>
                                                        Owner: @item.UserId
                                                    </div>
                                                    <div>
                                                        License: @item.License
                                                    </div>
                                                    <div>
                                                        Version: @item.NodeSet?.Version
                                                    </div>
                                                    <div>
                                                        Published: @item.NodeSet?.PublicationDate
                                                    </div>
                                                    <div>
                                                        Downloads: @item.NumberOfDownloads
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="card-footer text-right">
                                                <button type="button" class="btn btn-primary" style="float: right" @onclick="() => Open(item)">More...</button>
                                                <button type="button" class="btn btn-primary" style="float: right; margin-right: 1rem;" @onclick="() => DownloadFileFromURL(item)">Download</button>
                                                <button type="button" class="btn btn-primary" style="float: right; margin-right: 1rem;" @onclick="() => ViewFileFromURL(item)">View</button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
        <div class="uacl-pagination pt-2">
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">
                    @if (FirstItemOnPage > 0)
                    {
                        <li class="page-item"><a class="page-link" @onclick="() => ChangePage(-1)">Previous</a></li>
                        @if (CurrentPage != 1)
                        {
                            <li class="page-item"><a class="page-link" @onclick="() => ChangePageAbsolute(1)">1</a></li>
                        }
                        @if (CurrentPage - 4 == 3)
                        {
                            <li class="page-item"><a class="page-link" @onclick="() => ChangePageAbsolute(CurrentPage - 4)">2</a></li>
                        }
                        @if (CurrentPage - 4 > 3)
                        {
                            <li class="page-item"><a class="page-link" @onclick="() => ChangePageAbsolute(CurrentPage - 4)">...</a></li>
                        }
                        @for (int i = Math.Max(2, CurrentPage - 4); i < CurrentPage; i++)
                        {
                            int j = i;
                            <li class="page-item"><a class="page-link" @onclick="() => ChangePageAbsolute(j)">@i</a></li>
                        }

                        <li class="page-item active"><a class="page-link">@CurrentPage of @AllPages</a></li>

                        @for (int i = CurrentPage + 1; i <= Math.Min(AllPages - 1, CurrentPage + 4); i++)
                        {
                            int j = i;
                            <li class="page-item"><a class="page-link" @onclick="() => ChangePageAbsolute(j)">@i</a></li>
                        }
                        @if (CurrentPage + 4 == AllPages - 2)
                        {
                            <li class="page-item"><a class="page-link" @onclick="() => ChangePageAbsolute(CurrentPage + 4)">@(CurrentPage + 5)</a></li>
                        }
                        @if (CurrentPage + 4 < AllPages - 2)
                        {
                            <li class="page-item"><a class="page-link" @onclick="() => ChangePageAbsolute(CurrentPage + 4)">...</a></li>
                        }

                        @if (CurrentPage != AllPages)
                        {
                            <li class="page-item"><a class="page-link" @onclick="() => ChangePageAbsolute(AllPages)">@AllPages</a></li>
                        }
                        <li class="page-item"><a class="page-link" @onclick="() => ChangePage(+1)">Next</a></li>
                    }
                    else
                    {
                        <li class="page-item">No nodesets matching search keywords @string.Join(" ", SearchKeywords?.Select(k => $"'{k}'")).</li>
                    }
                </ul>
                <ul class="pagination justify-content-center">
                    <li class="page-item">Nodeset count: @TotalCount</li>
                </ul>
            </nav>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-default">Items per page</span>
                </div>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" value="@PAGE_SIZE" @onchange="@OnPageSizeChanged">
            </div>
        </div>
    </div>
</div>

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
            </div>
            <div class="modal-body">
                <p>@ModalDescription</p>
            </div>
            <div class="modal-body">
                <a href="@ModalDocumentationUrl" target="_blank" rel="noopener noreferrer">@ModalDocumentationUrl</a>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" style="margin-right: 1rem;" @onclick="() => DownloadFileFromURL(CurrentItem)">Download</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackDrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code
{
    private void OnSearchTextChanged(Microsoft.AspNetCore.Components.ChangeEventArgs patharg)
    {
        var searchText = patharg.Value?.ToString();
        var keywords = searchText?.Split(",").Select(k => k.Trim()).ToArray();
        keywords = keywords != null && keywords.Length > 0 && !string.IsNullOrEmpty(keywords[0]) ? keywords : new[] { "*" };

        if (!SearchKeywords.SequenceEqual(keywords))
        {
            SearchKeywords = keywords;
            CurrentPage = 1;

            _ = FetchData();
        }
    }
    private void OnPageSizeChanged(Microsoft.AspNetCore.Components.ChangeEventArgs patharg)
    {
        if (int.TryParse(patharg.Value?.ToString(), out var pageSize) && pageSize > 1 && pageSize <= 100)
        {
            PAGE_SIZE = pageSize;
            CurrentPage = 1;

            _ = FetchData();
        }
    }

    private string ModalClass = "";
    private string ModalDisplay = "display:none";
    private bool ShowBackDrop = false;

    private NamespaceMetaDataModel CurrentItem;

    private string ModalTitle = "";
    private string ModalDescription = "";
    private string ModalDocumentationUrl = "";


    int PAGE_SIZE = 6;
    const int COL_SIZE = 3;
    public bool Loading { get; set; } = true;
    private List<NamespaceMetaDataModel> Result = new();
    private int CurrentPage = 1;
    private int FirstItemOnPage = 0;
    private int LastItemOnPage = 0;
    private int TotalCount = 0;
    private int AllPages = 0;

    private string[] SearchKeywords { get; set; } = new[] { "" };

    private ClaimsPrincipal UserId;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false);

        UserId = state.User;

        await FetchData().ConfigureAwait(false);
    }

    private async Task DownloadFileFromURL(NamespaceMetaDataModel item)
    {
        var fileName = $"{item.Title}.NodeSet2.xml";
        var fileURL = $@"/infomodel/download/{item.NodeSet.Identifier}?nodesetXMLOnly=true";
        await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL).ConfigureAwait(false);
    }

    private void ViewFileFromURL(NamespaceMetaDataModel item)
    {
        NavigationManager.NavigateTo($"/browser?NodesetIdentifier={item.NodeSet.Identifier}&NodesetName={item.Title}&UserName={UserId.Identity.Name}", true);
    }

    private void Open(NamespaceMetaDataModel item)
    {
        ModalDisplay = "display:block;";
        ModalClass = "Show";
        ShowBackDrop = true;
        ModalTitle = item.Title;
        ModalDescription = item.Description;
        ModalDocumentationUrl = item.DocumentationUrl;
        CurrentItem = item;

        StateHasChanged();
    }

    private void Close()
    {
        ModalDisplay = "display:none";
        ModalClass = "";
        ShowBackDrop = false;

        StateHasChanged();
    }

    private void ChangePageAbsolute(int requestedPage)
    {
        var newPage = (this.TotalCount > 0) ? Math.Clamp(requestedPage, 1, (int)Math.Ceiling((decimal)this.TotalCount / PAGE_SIZE)) : 0;
        if (!CurrentPage.Equals(newPage))
        {
            CurrentPage = newPage;

            _ = FetchData();
        }

    }

    private void ChangePage(int increment)
    {
        ChangePageAbsolute(this.CurrentPage + increment);
    }

    private async Task FetchData()
    {
        Loading = true;

        IOrderedQueryable<NamespaceMetaDataModel> allOrderedNodesets = DataProvider.GetNodeSets(UserId.Identity.Name, keywords:SearchKeywords).Select(n => n.Metadata).OrderBy(md => md.Title);

        TotalCount = allOrderedNodesets.Count();

        int skip = (CurrentPage - 1) * PAGE_SIZE;

        Result = await allOrderedNodesets.Skip((CurrentPage - 1) * PAGE_SIZE).Take(PAGE_SIZE).ToListAsync().ConfigureAwait(false);

        AllPages = (int)Math.Ceiling((decimal)this.TotalCount / PAGE_SIZE);

        if (Result.Count > 0)
        {
            FirstItemOnPage = skip + 1;
            LastItemOnPage = FirstItemOnPage + Result.Count - 1;
        }
        else
        {
            FirstItemOnPage = 0;
            LastItemOnPage = 0;
        }

        Loading = false;

        // Switch to UI thread for StateHasChanged
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }
}

<style>
    .uacl-content .card .card-text {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .page-item {
        cursor: pointer;
    }
</style>
