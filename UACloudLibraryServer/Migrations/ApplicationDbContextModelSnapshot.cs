// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Opc.Ua.Cloud.Library;

#nullable disable

namespace Opc.Ua.Cloud.Library
{
    [DbContext(typeof(AppDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataVariableModelNodeModel", b =>
                {
                    b.Property<string>("DataVariablesNodeId")
                        .HasColumnType("text");

                    b.Property<string>("DataVariablesNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataVariablesNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NodesWithDataVariablesNodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodesWithDataVariablesNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("NodesWithDataVariablesNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DataVariablesNodeId", "DataVariablesNodeSetModelUri", "DataVariablesNodeSetPublicationDate", "NodesWithDataVariablesNodeId", "NodesWithDataVariablesNodeSetModelUri", "NodesWithDataVariablesNodeSetPublicationDate");

                    b.HasIndex("NodesWithDataVariablesNodeId", "NodesWithDataVariablesNodeSetModelUri", "NodesWithDataVariablesNodeSetPublicationDate");

                    b.ToTable("DataVariableModelNodeModel");
                });

            modelBuilder.Entity("InterfaceModelNodeModel", b =>
                {
                    b.Property<string>("InterfacesNodeId")
                        .HasColumnType("text");

                    b.Property<string>("InterfacesNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("InterfacesNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NodesWithInterfaceNodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodesWithInterfaceNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("NodesWithInterfaceNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InterfacesNodeId", "InterfacesNodeSetModelUri", "InterfacesNodeSetPublicationDate", "NodesWithInterfaceNodeId", "NodesWithInterfaceNodeSetModelUri", "NodesWithInterfaceNodeSetPublicationDate");

                    b.HasIndex("NodesWithInterfaceNodeId", "NodesWithInterfaceNodeSetModelUri", "NodesWithInterfaceNodeSetPublicationDate");

                    b.ToTable("InterfaceModelNodeModel");
                });

            modelBuilder.Entity("MethodModelNodeModel", b =>
                {
                    b.Property<string>("MethodsNodeId")
                        .HasColumnType("text");

                    b.Property<string>("MethodsNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("MethodsNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NodesWithMethodsNodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodesWithMethodsNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("NodesWithMethodsNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MethodsNodeId", "MethodsNodeSetModelUri", "MethodsNodeSetPublicationDate", "NodesWithMethodsNodeId", "NodesWithMethodsNodeSetModelUri", "NodesWithMethodsNodeSetPublicationDate");

                    b.HasIndex("NodesWithMethodsNodeId", "NodesWithMethodsNodeSetModelUri", "NodesWithMethodsNodeSetPublicationDate");

                    b.ToTable("MethodModelNodeModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NodeModelObjectModel", b =>
                {
                    b.Property<string>("NodesWithObjectsNodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodesWithObjectsNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("NodesWithObjectsNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ObjectsNodeId")
                        .HasColumnType("text");

                    b.Property<string>("ObjectsNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("ObjectsNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NodesWithObjectsNodeId", "NodesWithObjectsNodeSetModelUri", "NodesWithObjectsNodeSetPublicationDate", "ObjectsNodeId", "ObjectsNodeSetModelUri", "ObjectsNodeSetPublicationDate");

                    b.HasIndex("ObjectsNodeId", "ObjectsNodeSetModelUri", "ObjectsNodeSetPublicationDate");

                    b.ToTable("NodeModelObjectModel");
                });

            modelBuilder.Entity("NodeModelObjectTypeModel", b =>
                {
                    b.Property<string>("EventsNodeId")
                        .HasColumnType("text");

                    b.Property<string>("EventsNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventsNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NodesWithEventsNodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodesWithEventsNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("NodesWithEventsNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EventsNodeId", "EventsNodeSetModelUri", "EventsNodeSetPublicationDate", "NodesWithEventsNodeId", "NodesWithEventsNodeSetModelUri", "NodesWithEventsNodeSetPublicationDate");

                    b.HasIndex("NodesWithEventsNodeId", "NodesWithEventsNodeSetModelUri", "NodesWithEventsNodeSetPublicationDate");

                    b.ToTable("NodeModelObjectTypeModel");
                });

            modelBuilder.Entity("NodeModelVariableModel", b =>
                {
                    b.Property<string>("NodesWithPropertiesNodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodesWithPropertiesNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("NodesWithPropertiesNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PropertiesNodeId")
                        .HasColumnType("text");

                    b.Property<string>("PropertiesNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("PropertiesNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NodesWithPropertiesNodeId", "NodesWithPropertiesNodeSetModelUri", "NodesWithPropertiesNodeSetPublicationDate", "PropertiesNodeId", "PropertiesNodeSetModelUri", "PropertiesNodeSetPublicationDate");

                    b.HasIndex("PropertiesNodeId", "PropertiesNodeSetModelUri", "PropertiesNodeSetPublicationDate");

                    b.ToTable("NodeModelVariableModel");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DbFiles", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Blob")
                        .HasColumnType("text");

                    b.Property<string>("Values")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("DbFiles");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.Models.NamespaceMetaDataModel", b =>
                {
                    b.Property<string>("NodesetId")
                        .HasColumnType("text");

                    b.Property<string>("ApprovalInformation")
                        .HasColumnType("text");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("text");

                    b.Property<string>("CopyrightText")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DocumentationUrl")
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Keywords")
                        .HasColumnType("text[]");

                    b.Property<string>("License")
                        .HasColumnType("text");

                    b.Property<string>("LicenseUrl")
                        .HasColumnType("text");

                    b.Property<long>("NumberOfDownloads")
                        .HasColumnType("bigint");

                    b.Property<string>("PurchasingInformationUrl")
                        .HasColumnType("text");

                    b.Property<string>("ReleaseNotesUrl")
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("SupportedLocales")
                        .HasColumnType("text[]");

                    b.Property<string>("TestSpecificationUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("NodesetId");

                    b.HasIndex("Title", "Description")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title", "Description"), "GIN");

                    b.ToTable("NamespaceMeta");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.NodeModel", b =>
                {
                    b.Property<string>("NodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("NodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BrowseName")
                        .HasColumnType("text");

                    b.Property<string>("Documentation")
                        .HasColumnType("text");

                    b.Property<string>("NodeSetUnknownNodesModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetUnknownNodesPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReleaseStatus")
                        .HasColumnType("text");

                    b.Property<string>("SymbolicName")
                        .HasColumnType("text");

                    b.HasKey("NodeId", "NodeSetModelUri", "NodeSetPublicationDate");

                    b.HasIndex("BrowseName")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("BrowseName"), "GIN");

                    b.HasIndex("NodeSetModelUri", "NodeSetPublicationDate");

                    b.HasIndex("NodeSetUnknownNodesModelUri", "NodeSetUnknownNodesPublicationDate");

                    b.ToTable("Nodes", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.NodeSetModel", b =>
                {
                    b.Property<string>("ModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.Property<string>("XmlSchemaUri")
                        .HasColumnType("text");

                    b.HasKey("ModelUri", "PublicationDate");

                    b.HasAlternateKey("Identifier");

                    b.ToTable("NodeSets", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.BaseTypeModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.NodeModel");

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("boolean");

                    b.Property<string>("SuperType")
                        .HasColumnType("text");

                    b.ToTable("BaseTypes", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.MethodModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.NodeModel");

                    b.Property<string>("ModellingRule")
                        .HasColumnType("text");

                    b.Property<string>("NodeSetMethodsModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetMethodsPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentModelUri")
                        .HasColumnType("text");

                    b.Property<string>("ParentNodeId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ParentPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeDefinition")
                        .HasColumnType("text");

                    b.HasIndex("NodeSetMethodsModelUri", "NodeSetMethodsPublicationDate");

                    b.HasIndex("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                    b.ToTable("Methods", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.ObjectModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.NodeModel");

                    b.Property<byte?>("EventNotifier")
                        .HasColumnType("smallint");

                    b.Property<string>("ModellingRule")
                        .HasColumnType("text");

                    b.Property<string>("NodeSetObjectsModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetObjectsPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentModelUri")
                        .HasColumnType("text");

                    b.Property<string>("ParentNodeId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ParentPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeDefinition")
                        .HasColumnType("text");

                    b.HasIndex("NodeSetObjectsModelUri", "NodeSetObjectsPublicationDate");

                    b.HasIndex("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                    b.ToTable("Objects", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.VariableModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.NodeModel");

                    b.Property<long?>("AccessLevel")
                        .HasColumnType("bigint");

                    b.Property<int?>("AccessRestrictions")
                        .HasColumnType("integer");

                    b.Property<string>("ArrayDimensions")
                        .HasColumnType("text");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<long?>("EURangeAccessLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("EURangeModellingRule")
                        .HasColumnType("text");

                    b.Property<string>("EURangeNodeId")
                        .HasColumnType("text");

                    b.Property<long?>("EngUnitAccessLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("EngUnitModellingRule")
                        .HasColumnType("text");

                    b.Property<string>("EngUnitNodeId")
                        .HasColumnType("text");

                    b.Property<long?>("EnumValue")
                        .HasColumnType("bigint");

                    b.Property<double?>("InstrumentMaxValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("InstrumentMinValue")
                        .HasColumnType("double precision");

                    b.Property<long?>("InstrumentRangeAccessLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("InstrumentRangeModellingRule")
                        .HasColumnType("text");

                    b.Property<string>("InstrumentRangeNodeId")
                        .HasColumnType("text");

                    b.Property<double?>("MaxValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("MinValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("MinimumSamplingInterval")
                        .HasColumnType("double precision");

                    b.Property<string>("ModellingRule")
                        .HasColumnType("text");

                    b.Property<string>("TypeDefinition")
                        .HasColumnType("text");

                    b.Property<long?>("UserWriteMask")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<int?>("ValueRank")
                        .HasColumnType("integer");

                    b.Property<long?>("WriteMask")
                        .HasColumnType("bigint");

                    b.ToTable("Variables", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DataTypeModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.BaseTypeModel");

                    b.Property<bool?>("IsOptionSet")
                        .HasColumnType("boolean");

                    b.Property<string>("NodeSetDataTypesModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetDataTypesPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetDataTypesModelUri", "NodeSetDataTypesPublicationDate");

                    b.ToTable("DataTypes", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.ObjectTypeModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.BaseTypeModel");

                    b.Property<string>("NodeSetObjectTypesModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetObjectTypesPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetObjectTypesModelUri", "NodeSetObjectTypesPublicationDate");

                    b.ToTable("ObjectTypes", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.ReferenceTypeModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.BaseTypeModel");

                    b.Property<string>("NodeSetReferenceTypesModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetReferenceTypesPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Symmetric")
                        .HasColumnType("boolean");

                    b.HasIndex("NodeSetReferenceTypesModelUri", "NodeSetReferenceTypesPublicationDate");

                    b.ToTable("ReferenceTypes", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.VariableTypeModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.BaseTypeModel");

                    b.Property<string>("ArrayDimensions")
                        .HasColumnType("text");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<string>("NodeSetVariableTypesModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetVariableTypesPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<int?>("ValueRank")
                        .HasColumnType("integer");

                    b.HasIndex("NodeSetVariableTypesModelUri", "NodeSetVariableTypesPublicationDate");

                    b.ToTable("VariableTypes", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DataVariableModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.VariableModel");

                    b.Property<string>("NodeSetDataVariablesModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetDataVariablesPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentModelUri")
                        .HasColumnType("text");

                    b.Property<string>("ParentNodeId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ParentPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetDataVariablesModelUri", "NodeSetDataVariablesPublicationDate");

                    b.HasIndex("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                    b.ToTable("DataVariables", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.PropertyModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.VariableModel");

                    b.Property<string>("NodeSetPropertiesModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetPropertiesPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentModelUri")
                        .HasColumnType("text");

                    b.Property<string>("ParentNodeId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ParentPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetPropertiesModelUri", "NodeSetPropertiesPublicationDate");

                    b.HasIndex("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.InterfaceModel", b =>
                {
                    b.HasBaseType("Opc.Ua.Cloud.Library.ObjectTypeModel");

                    b.Property<string>("NodeSetInterfacesModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetInterfacesPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetInterfacesModelUri", "NodeSetInterfacesPublicationDate");

                    b.ToTable("Interfaces", (string)null);
                });

            modelBuilder.Entity("DataVariableModelNodeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.DataVariableModel", null)
                        .WithMany()
                        .HasForeignKey("DataVariablesNodeId", "DataVariablesNodeSetModelUri", "DataVariablesNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithMany()
                        .HasForeignKey("NodesWithDataVariablesNodeId", "NodesWithDataVariablesNodeSetModelUri", "NodesWithDataVariablesNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterfaceModelNodeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.InterfaceModel", null)
                        .WithMany()
                        .HasForeignKey("InterfacesNodeId", "InterfacesNodeSetModelUri", "InterfacesNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithMany()
                        .HasForeignKey("NodesWithInterfaceNodeId", "NodesWithInterfaceNodeSetModelUri", "NodesWithInterfaceNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MethodModelNodeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.MethodModel", null)
                        .WithMany()
                        .HasForeignKey("MethodsNodeId", "MethodsNodeSetModelUri", "MethodsNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithMany()
                        .HasForeignKey("NodesWithMethodsNodeId", "NodesWithMethodsNodeSetModelUri", "NodesWithMethodsNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NodeModelObjectModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithMany()
                        .HasForeignKey("NodesWithObjectsNodeId", "NodesWithObjectsNodeSetModelUri", "NodesWithObjectsNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.ObjectModel", null)
                        .WithMany()
                        .HasForeignKey("ObjectsNodeId", "ObjectsNodeSetModelUri", "ObjectsNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NodeModelObjectTypeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.ObjectTypeModel", null)
                        .WithMany()
                        .HasForeignKey("EventsNodeId", "EventsNodeSetModelUri", "EventsNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithMany()
                        .HasForeignKey("NodesWithEventsNodeId", "NodesWithEventsNodeSetModelUri", "NodesWithEventsNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NodeModelVariableModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithMany()
                        .HasForeignKey("NodesWithPropertiesNodeId", "NodesWithPropertiesNodeSetModelUri", "NodesWithPropertiesNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.VariableModel", null)
                        .WithMany()
                        .HasForeignKey("PropertiesNodeId", "PropertiesNodeSetModelUri", "PropertiesNodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.NodeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", "NodeSet")
                        .WithMany()
                        .HasForeignKey("NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("UnknownNodes")
                        .HasForeignKey("NodeSetUnknownNodesModelUri", "NodeSetUnknownNodesPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Opc.Ua.Cloud.Library.NodeModel+LocalizedText", "Description", b1 =>
                        {
                            b1.Property<string>("NodeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("NodeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("NodeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Locale")
                                .HasColumnType("text");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate", "Id");

                            b1.ToTable("Nodes_Description");

                            b1.WithOwner()
                                .HasForeignKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");
                        });

                    b.OwnsMany("Opc.Ua.Cloud.Library.NodeModel+LocalizedText", "DisplayName", b1 =>
                        {
                            b1.Property<string>("NodeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("NodeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("NodeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Locale")
                                .HasColumnType("text");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate", "Id");

                            b1.ToTable("Nodes_DisplayName");

                            b1.WithOwner()
                                .HasForeignKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");
                        });

                    b.OwnsMany("Opc.Ua.Cloud.Library.NodeModel+NodeAndReference", "OtherReferencedNodes", b1 =>
                        {
                            b1.Property<string>("OwnerNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("OwnerModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("OwnerPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ReferenceTypeModelUri")
                                .HasColumnType("text");

                            b1.Property<string>("ReferenceTypeNodeId")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ReferenceTypePublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ReferencedModelUri")
                                .HasColumnType("text");

                            b1.Property<string>("ReferencedNodeId")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ReferencedPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("OwnerNodeId", "OwnerModelUri", "OwnerPublicationDate", "Id");

                            b1.HasIndex("ReferenceTypeNodeId", "ReferenceTypeModelUri", "ReferenceTypePublicationDate");

                            b1.HasIndex("ReferencedNodeId", "ReferencedModelUri", "ReferencedPublicationDate");

                            b1.ToTable("Nodes_OtherReferencedNodes");

                            b1.WithOwner()
                                .HasForeignKey("OwnerNodeId", "OwnerModelUri", "OwnerPublicationDate");

                            b1.HasOne("Opc.Ua.Cloud.Library.NodeModel", "ReferenceType")
                                .WithMany()
                                .HasForeignKey("ReferenceTypeNodeId", "ReferenceTypeModelUri", "ReferenceTypePublicationDate")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Opc.Ua.Cloud.Library.NodeModel", "Node")
                                .WithMany()
                                .HasForeignKey("ReferencedNodeId", "ReferencedModelUri", "ReferencedPublicationDate")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.Navigation("Node");

                            b1.Navigation("ReferenceType");
                        });

                    b.OwnsMany("Opc.Ua.Cloud.Library.NodeModel+NodeAndReference", "OtherReferencingNodes", b1 =>
                        {
                            b1.Property<string>("OwnerNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("OwnerModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("OwnerPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ReferenceTypeModelUri")
                                .HasColumnType("text");

                            b1.Property<string>("ReferenceTypeNodeId")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ReferenceTypePublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ReferencingModelUri")
                                .HasColumnType("text");

                            b1.Property<string>("ReferencingNodeId")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ReferencingPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("OwnerNodeId", "OwnerModelUri", "OwnerPublicationDate", "Id");

                            b1.HasIndex("ReferenceTypeNodeId", "ReferenceTypeModelUri", "ReferenceTypePublicationDate");

                            b1.HasIndex("ReferencingNodeId", "ReferencingModelUri", "ReferencingPublicationDate");

                            b1.ToTable("Nodes_OtherReferencingNodes");

                            b1.WithOwner()
                                .HasForeignKey("OwnerNodeId", "OwnerModelUri", "OwnerPublicationDate");

                            b1.HasOne("Opc.Ua.Cloud.Library.NodeModel", "ReferenceType")
                                .WithMany()
                                .HasForeignKey("ReferenceTypeNodeId", "ReferenceTypeModelUri", "ReferenceTypePublicationDate")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Opc.Ua.Cloud.Library.NodeModel", "Node")
                                .WithMany()
                                .HasForeignKey("ReferencingNodeId", "ReferencingModelUri", "ReferencingPublicationDate")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.Navigation("Node");

                            b1.Navigation("ReferenceType");
                        });

                    b.Navigation("Description");

                    b.Navigation("DisplayName");

                    b.Navigation("NodeSet");

                    b.Navigation("OtherReferencedNodes");

                    b.Navigation("OtherReferencingNodes");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.NodeSetModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.Models.NamespaceMetaDataModel", "Metadata")
                        .WithOne("NodeSet")
                        .HasForeignKey("Opc.Ua.Cloud.Library.NodeSetModel", "Identifier")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsMany("Opc.Ua.Cloud.Library.RequiredModelInfoModel", "RequiredModels", b1 =>
                        {
                            b1.Property<string>("DependentModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("DependentPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("AvailableModelModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("AvailableModelPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("PublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Version")
                                .HasColumnType("text");

                            b1.HasKey("DependentModelUri", "DependentPublicationDate", "Id");

                            b1.HasIndex("AvailableModelModelUri", "AvailableModelPublicationDate");

                            b1.ToTable("RequiredModelInfoModel");

                            b1.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", "AvailableModel")
                                .WithMany()
                                .HasForeignKey("AvailableModelModelUri", "AvailableModelPublicationDate")
                                .OnDelete(DeleteBehavior.SetNull);

                            b1.WithOwner()
                                .HasForeignKey("DependentModelUri", "DependentPublicationDate");

                            b1.Navigation("AvailableModel");
                        });

                    b.Navigation("Metadata");

                    b.Navigation("RequiredModels");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.BaseTypeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.BaseTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.MethodModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("Methods")
                        .HasForeignKey("NodeSetMethodsModelUri", "NodeSetMethodsPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.MethodModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentNodeId", "ParentModelUri", "ParentPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.ObjectModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("Objects")
                        .HasForeignKey("NodeSetObjectsModelUri", "NodeSetObjectsPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.ObjectModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentNodeId", "ParentModelUri", "ParentPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.VariableModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.VariableModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Opc.Ua.Cloud.Library.VariableModel+EngineeringUnitInfo", "EngineeringUnit", b1 =>
                        {
                            b1.Property<string>("VariableModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("VariableModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("VariableModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("NamespaceUri")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int?>("UnitId")
                                .HasColumnType("integer");

                            b1.HasKey("VariableModelNodeId", "VariableModelNodeSetModelUri", "VariableModelNodeSetPublicationDate");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableModelNodeId", "VariableModelNodeSetModelUri", "VariableModelNodeSetPublicationDate");

                            b1.OwnsOne("Opc.Ua.Cloud.Library.NodeModel+LocalizedText", "Description", b2 =>
                                {
                                    b2.Property<string>("EngineeringUnitInfoVariableModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("EngineeringUnitInfoVariableModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("EngineeringUnitInfoVariableModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");

                                    b2.ToTable("Variables");

                                    b2.WithOwner()
                                        .HasForeignKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");
                                });

                            b1.OwnsOne("Opc.Ua.Cloud.Library.NodeModel+LocalizedText", "DisplayName", b2 =>
                                {
                                    b2.Property<string>("EngineeringUnitInfoVariableModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("EngineeringUnitInfoVariableModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("EngineeringUnitInfoVariableModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");

                                    b2.ToTable("Variables");

                                    b2.WithOwner()
                                        .HasForeignKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("DisplayName");
                        });

                    b.Navigation("EngineeringUnit");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DataTypeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("DataTypes")
                        .HasForeignKey("NodeSetDataTypesModelUri", "NodeSetDataTypesPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Opc.Ua.Cloud.Library.BaseTypeModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.DataTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Opc.Ua.Cloud.Library.DataTypeModel+StructureField", "StructureFields", b1 =>
                        {
                            b1.Property<string>("DataTypeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("DataTypeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("DataTypeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("AllowSubTypes")
                                .HasColumnType("boolean");

                            b1.Property<string>("ArrayDimensions")
                                .HasColumnType("text");

                            b1.Property<string>("DataType")
                                .HasColumnType("text");

                            b1.Property<int>("FieldOrder")
                                .HasColumnType("integer");

                            b1.Property<bool>("IsOptional")
                                .HasColumnType("boolean");

                            b1.Property<long?>("MaxStringLength")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("SymbolicName")
                                .HasColumnType("text");

                            b1.Property<int?>("ValueRank")
                                .HasColumnType("integer");

                            b1.HasKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate", "Id");

                            b1.ToTable("StructureField");

                            b1.WithOwner()
                                .HasForeignKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate");

                            b1.OwnsMany("Opc.Ua.Cloud.Library.NodeModel+LocalizedText", "Description", b2 =>
                                {
                                    b2.Property<string>("StructureFieldDataTypeModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("StructureFieldDataTypeModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("StructureFieldDataTypeModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<int>("StructureFieldId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("StructureFieldDataTypeModelNodeId", "StructureFieldDataTypeModelNodeSetModelUri", "StructureFieldDataTypeModelNodeSetPublicationDate", "StructureFieldId", "Id");

                                    b2.ToTable("StructureField_Description");

                                    b2.WithOwner()
                                        .HasForeignKey("StructureFieldDataTypeModelNodeId", "StructureFieldDataTypeModelNodeSetModelUri", "StructureFieldDataTypeModelNodeSetPublicationDate", "StructureFieldId");
                                });

                            b1.Navigation("Description");
                        });

                    b.OwnsMany("Opc.Ua.Cloud.Library.DataTypeModel+UaEnumField", "EnumFields", b1 =>
                        {
                            b1.Property<string>("DataTypeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("DataTypeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("DataTypeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("SymbolicName")
                                .HasColumnType("text");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint");

                            b1.HasKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate", "Id");

                            b1.ToTable("UaEnumField");

                            b1.WithOwner()
                                .HasForeignKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate");

                            b1.OwnsMany("Opc.Ua.Cloud.Library.NodeModel+LocalizedText", "Description", b2 =>
                                {
                                    b2.Property<string>("UaEnumFieldDataTypeModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("UaEnumFieldDataTypeModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("UaEnumFieldDataTypeModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<int>("UaEnumFieldId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId", "Id");

                                    b2.ToTable("UaEnumField_Description");

                                    b2.WithOwner()
                                        .HasForeignKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId");
                                });

                            b1.OwnsMany("Opc.Ua.Cloud.Library.NodeModel+LocalizedText", "DisplayName", b2 =>
                                {
                                    b2.Property<string>("UaEnumFieldDataTypeModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("UaEnumFieldDataTypeModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("UaEnumFieldDataTypeModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<int>("UaEnumFieldId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId", "Id");

                                    b2.ToTable("UaEnumField_DisplayName");

                                    b2.WithOwner()
                                        .HasForeignKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("DisplayName");
                        });

                    b.Navigation("EnumFields");

                    b.Navigation("StructureFields");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.ObjectTypeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("ObjectTypes")
                        .HasForeignKey("NodeSetObjectTypesModelUri", "NodeSetObjectTypesPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Opc.Ua.Cloud.Library.BaseTypeModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.ObjectTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.ReferenceTypeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("ReferenceTypes")
                        .HasForeignKey("NodeSetReferenceTypesModelUri", "NodeSetReferenceTypesPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Opc.Ua.Cloud.Library.BaseTypeModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.ReferenceTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Opc.Ua.Cloud.Library.NodeModel+LocalizedText", "InverseName", b1 =>
                        {
                            b1.Property<string>("ReferenceTypeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("ReferenceTypeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("ReferenceTypeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Locale")
                                .HasColumnType("text");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ReferenceTypeModelNodeId", "ReferenceTypeModelNodeSetModelUri", "ReferenceTypeModelNodeSetPublicationDate", "Id");

                            b1.ToTable("ReferenceTypes_InverseName");

                            b1.WithOwner()
                                .HasForeignKey("ReferenceTypeModelNodeId", "ReferenceTypeModelNodeSetModelUri", "ReferenceTypeModelNodeSetPublicationDate");
                        });

                    b.Navigation("InverseName");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.VariableTypeModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("VariableTypes")
                        .HasForeignKey("NodeSetVariableTypesModelUri", "NodeSetVariableTypesPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Opc.Ua.Cloud.Library.BaseTypeModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.VariableTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DataVariableModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("DataVariables")
                        .HasForeignKey("NodeSetDataVariablesModelUri", "NodeSetDataVariablesPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Opc.Ua.Cloud.Library.VariableModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.DataVariableModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentNodeId", "ParentModelUri", "ParentPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.PropertyModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("Properties")
                        .HasForeignKey("NodeSetPropertiesModelUri", "NodeSetPropertiesPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Opc.Ua.Cloud.Library.VariableModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.PropertyModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opc.Ua.Cloud.Library.NodeModel", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentNodeId", "ParentModelUri", "ParentPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.InterfaceModel", b =>
                {
                    b.HasOne("Opc.Ua.Cloud.Library.NodeSetModel", null)
                        .WithMany("Interfaces")
                        .HasForeignKey("NodeSetInterfacesModelUri", "NodeSetInterfacesPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Opc.Ua.Cloud.Library.ObjectTypeModel", null)
                        .WithOne()
                        .HasForeignKey("Opc.Ua.Cloud.Library.InterfaceModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.Models.NamespaceMetaDataModel", b =>
                {
                    b.Navigation("NodeSet");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.NodeSetModel", b =>
                {
                    b.Navigation("DataTypes");

                    b.Navigation("DataVariables");

                    b.Navigation("Interfaces");

                    b.Navigation("Methods");

                    b.Navigation("ObjectTypes");

                    b.Navigation("Objects");

                    b.Navigation("Properties");

                    b.Navigation("ReferenceTypes");

                    b.Navigation("UnknownNodes");

                    b.Navigation("VariableTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
