// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Opc.Ua.Cloud.Library;

#nullable disable

namespace Opc.Ua.Cloud.Library
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220827002530_ReferencingNodes")]
    partial class ReferencingNodes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeModel", b => {
                b.Property<string>("NodeId")
                    .HasColumnType("text");

                b.Property<string>("NodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("BrowseName")
                    .HasColumnType("text");

                b.Property<List<string>>("Categories")
                    .HasColumnType("text[]");

                b.Property<string>("Documentation")
                    .HasColumnType("text");

                b.Property<string>("NodeSetUnknownNodesModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetUnknownNodesPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("ReleaseStatus")
                    .HasColumnType("text");

                b.Property<string>("SymbolicName")
                    .HasColumnType("text");

                b.HasKey("NodeId", "NodeSetModelUri", "NodeSetPublicationDate");

                b.HasIndex("NodeSetModelUri", "NodeSetPublicationDate");

                b.HasIndex("NodeSetUnknownNodesModelUri", "NodeSetUnknownNodesPublicationDate");

                b.ToTable("Nodes", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeSetModel", b => {
                b.Property<string>("ModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("PublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Discriminator")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Identifier")
                    .HasColumnType("text");

                b.Property<string>("Version")
                    .HasColumnType("text");

                b.HasKey("ModelUri", "PublicationDate");

                b.ToTable("NodeSets", (string)null);

                b.HasDiscriminator<string>("Discriminator").HasValue("NodeSetModel");
            });

            modelBuilder.Entity("DataVariableModelNodeModel", b => {
                b.Property<string>("DataVariablesNodeId")
                    .HasColumnType("text");

                b.Property<string>("DataVariablesNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("DataVariablesNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NodesWithDataVariablesNodeId")
                    .HasColumnType("text");

                b.Property<string>("NodesWithDataVariablesNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("NodesWithDataVariablesNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("DataVariablesNodeId", "DataVariablesNodeSetModelUri", "DataVariablesNodeSetPublicationDate", "NodesWithDataVariablesNodeId", "NodesWithDataVariablesNodeSetModelUri", "NodesWithDataVariablesNodeSetPublicationDate");

                b.HasIndex("NodesWithDataVariablesNodeId", "NodesWithDataVariablesNodeSetModelUri", "NodesWithDataVariablesNodeSetPublicationDate");

                b.ToTable("DataVariableModelNodeModel");
            });

            modelBuilder.Entity("InterfaceModelNodeModel", b => {
                b.Property<string>("InterfacesNodeId")
                    .HasColumnType("text");

                b.Property<string>("InterfacesNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("InterfacesNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NodesWithInterfaceNodeId")
                    .HasColumnType("text");

                b.Property<string>("NodesWithInterfaceNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("NodesWithInterfaceNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("InterfacesNodeId", "InterfacesNodeSetModelUri", "InterfacesNodeSetPublicationDate", "NodesWithInterfaceNodeId", "NodesWithInterfaceNodeSetModelUri", "NodesWithInterfaceNodeSetPublicationDate");

                b.HasIndex("NodesWithInterfaceNodeId", "NodesWithInterfaceNodeSetModelUri", "NodesWithInterfaceNodeSetPublicationDate");

                b.ToTable("InterfaceModelNodeModel");
            });

            modelBuilder.Entity("MethodModelNodeModel", b => {
                b.Property<string>("MethodsNodeId")
                    .HasColumnType("text");

                b.Property<string>("MethodsNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("MethodsNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NodesWithMethodsNodeId")
                    .HasColumnType("text");

                b.Property<string>("NodesWithMethodsNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("NodesWithMethodsNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("MethodsNodeId", "MethodsNodeSetModelUri", "MethodsNodeSetPublicationDate", "NodesWithMethodsNodeId", "NodesWithMethodsNodeSetModelUri", "NodesWithMethodsNodeSetPublicationDate");

                b.HasIndex("NodesWithMethodsNodeId", "NodesWithMethodsNodeSetModelUri", "NodesWithMethodsNodeSetPublicationDate");

                b.ToTable("MethodModelNodeModel");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b => {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex");

                b.ToTable("AspNetRoles", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b => {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex");

                b.ToTable("AspNetUsers", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b => {
                b.Property<string>("LoginProvider")
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("ProviderKey")
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b => {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("RoleId")
                    .HasColumnType("text");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b => {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("LoginProvider")
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("Name")
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens", (string)null);
            });

            modelBuilder.Entity("NodeModelObjectModel", b => {
                b.Property<string>("NodesWithObjectsNodeId")
                    .HasColumnType("text");

                b.Property<string>("NodesWithObjectsNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("NodesWithObjectsNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("ObjectsNodeId")
                    .HasColumnType("text");

                b.Property<string>("ObjectsNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("ObjectsNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("NodesWithObjectsNodeId", "NodesWithObjectsNodeSetModelUri", "NodesWithObjectsNodeSetPublicationDate", "ObjectsNodeId", "ObjectsNodeSetModelUri", "ObjectsNodeSetPublicationDate");

                b.HasIndex("ObjectsNodeId", "ObjectsNodeSetModelUri", "ObjectsNodeSetPublicationDate");

                b.ToTable("NodeModelObjectModel");
            });

            modelBuilder.Entity("NodeModelObjectTypeModel", b => {
                b.Property<string>("EventsNodeId")
                    .HasColumnType("text");

                b.Property<string>("EventsNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("EventsNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NodesWithEventsNodeId")
                    .HasColumnType("text");

                b.Property<string>("NodesWithEventsNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("NodesWithEventsNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("EventsNodeId", "EventsNodeSetModelUri", "EventsNodeSetPublicationDate", "NodesWithEventsNodeId", "NodesWithEventsNodeSetModelUri", "NodesWithEventsNodeSetPublicationDate");

                b.HasIndex("NodesWithEventsNodeId", "NodesWithEventsNodeSetModelUri", "NodesWithEventsNodeSetPublicationDate");

                b.ToTable("NodeModelObjectTypeModel");
            });

            modelBuilder.Entity("NodeModelVariableModel", b => {
                b.Property<string>("NodesWithPropertiesNodeId")
                    .HasColumnType("text");

                b.Property<string>("NodesWithPropertiesNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("NodesWithPropertiesNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("PropertiesNodeId")
                    .HasColumnType("text");

                b.Property<string>("PropertiesNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime>("PropertiesNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("NodesWithPropertiesNodeId", "NodesWithPropertiesNodeSetModelUri", "NodesWithPropertiesNodeSetPublicationDate", "PropertiesNodeId", "PropertiesNodeSetModelUri", "PropertiesNodeSetPublicationDate");

                b.HasIndex("PropertiesNodeId", "PropertiesNodeSetModelUri", "PropertiesNodeSetPublicationDate");

                b.ToTable("NodeModelVariableModel");
            });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DbContextModels.MetadataModel", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("metadata_id");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("Name")
                    .HasColumnType("text")
                    .HasColumnName("metadata_name");

                b.Property<long>("NodesetId")
                    .HasColumnType("bigint")
                    .HasColumnName("nodeset_id");

                b.Property<string>("Value")
                    .HasColumnType("text")
                    .HasColumnName("metadata_value");

                b.HasKey("Id");

                b.ToTable("metadata");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.BaseTypeModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.NodeModel");

                b.Property<bool>("IsAbstract")
                    .HasColumnType("boolean");

                b.Property<string>("SuperTypeNodeId")
                    .HasColumnType("text");

                b.Property<string>("SuperTypeNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("SuperTypeNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasIndex("SuperTypeNodeId", "SuperTypeNodeSetModelUri", "SuperTypeNodeSetPublicationDate");

                b.ToTable("BaseTypes", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.MethodModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.NodeModel");

                b.Property<string>("ModelingRule")
                    .HasColumnType("text");

                b.Property<string>("ParentModelUri")
                    .HasColumnType("text");

                b.Property<string>("ParentNodeId")
                    .HasColumnType("text");

                b.Property<DateTime?>("ParentPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("TypeDefinitionNodeId")
                    .HasColumnType("text");

                b.Property<string>("TypeDefinitionNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("TypeDefinitionNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasIndex("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                b.HasIndex("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                b.ToTable("Methods", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ObjectModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.NodeModel");

                b.Property<string>("ModelingRule")
                    .HasColumnType("text");

                b.Property<string>("NodeSetObjectsModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetObjectsPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("ParentModelUri")
                    .HasColumnType("text");

                b.Property<string>("ParentNodeId")
                    .HasColumnType("text");

                b.Property<DateTime?>("ParentPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("TypeDefinitionNodeId")
                    .HasColumnType("text");

                b.Property<string>("TypeDefinitionNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("TypeDefinitionNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasIndex("NodeSetObjectsModelUri", "NodeSetObjectsPublicationDate");

                b.HasIndex("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                b.HasIndex("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                b.ToTable("Objects", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.VariableModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.NodeModel");

                b.Property<long?>("AccessLevel")
                    .HasColumnType("bigint");

                b.Property<int?>("AccessRestrictions")
                    .HasColumnType("integer");

                b.Property<string>("ArrayDimensions")
                    .HasColumnType("text");

                b.Property<string>("DataTypeNodeId")
                    .HasColumnType("text");

                b.Property<string>("DataTypeNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("DataTypeNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<long?>("EURangeAccessLevel")
                    .HasColumnType("bigint");

                b.Property<string>("EURangeModelingRule")
                    .HasColumnType("text");

                b.Property<string>("EURangeNodeId")
                    .HasColumnType("text");

                b.Property<long?>("EngUnitAccessLevel")
                    .HasColumnType("bigint");

                b.Property<string>("EngUnitModelingRule")
                    .HasColumnType("text");

                b.Property<string>("EngUnitNodeId")
                    .HasColumnType("text");

                b.Property<long?>("EnumValue")
                    .HasColumnType("bigint");

                b.Property<double?>("InstrumentMaxValue")
                    .HasColumnType("double precision");

                b.Property<double?>("InstrumentMinValue")
                    .HasColumnType("double precision");

                b.Property<double?>("MaxValue")
                    .HasColumnType("double precision");

                b.Property<double?>("MinValue")
                    .HasColumnType("double precision");

                b.Property<double?>("MinimumSamplingInterval")
                    .HasColumnType("double precision");

                b.Property<string>("ModelingRule")
                    .HasColumnType("text");

                b.Property<string>("TypeDefinitionNodeId")
                    .HasColumnType("text");

                b.Property<string>("TypeDefinitionNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("TypeDefinitionNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<long?>("UserWriteMask")
                    .HasColumnType("bigint");

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.Property<int?>("ValueRank")
                    .HasColumnType("integer");

                b.Property<long?>("WriteMask")
                    .HasColumnType("bigint");

                b.HasIndex("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                b.HasIndex("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                b.ToTable("Variables", (string)null);
            });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.CloudLibNodeSetModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.NodeSetModel");

                b.Property<TimeSpan>("ValidationElapsedTime")
                    .HasColumnType("interval");

                b.Property<string[]>("ValidationErrors")
                    .HasColumnType("text[]");

                b.Property<DateTime?>("ValidationFinishedTime")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("ValidationStatus")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("ValidationStatusInfo")
                    .HasColumnType("text");

                b.HasDiscriminator().HasValue("CloudLibNodeSetModel");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.DataTypeModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.BaseTypeModel");

                b.Property<bool?>("IsOptionSet")
                    .HasColumnType("boolean");

                b.Property<string>("NodeSetDataTypesModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetDataTypesPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasIndex("NodeSetDataTypesModelUri", "NodeSetDataTypesPublicationDate");

                b.ToTable("DataTypes", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.DataVariableModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.VariableModel");

                b.Property<string>("NodeSetDataVariablesModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetDataVariablesPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("ParentModelUri")
                    .HasColumnType("text");

                b.Property<string>("ParentNodeId")
                    .HasColumnType("text");

                b.Property<DateTime?>("ParentPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasIndex("NodeSetDataVariablesModelUri", "NodeSetDataVariablesPublicationDate");

                b.HasIndex("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                b.ToTable("DataVariables", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.BaseTypeModel");

                b.Property<string>("NodeSetObjectTypesModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetObjectTypesPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasIndex("NodeSetObjectTypesModelUri", "NodeSetObjectTypesPublicationDate");

                b.ToTable("ObjectTypes", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.PropertyModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.VariableModel");

                b.Property<string>("NodeSetPropertiesModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetPropertiesPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("ParentModelUri")
                    .HasColumnType("text");

                b.Property<string>("ParentNodeId")
                    .HasColumnType("text");

                b.Property<DateTime?>("ParentPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasIndex("NodeSetPropertiesModelUri", "NodeSetPropertiesPublicationDate");

                b.HasIndex("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                b.ToTable("Properties", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ReferenceTypeModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.BaseTypeModel");

                b.Property<string>("NodeSetReferenceTypesModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetReferenceTypesPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<bool>("Symmetric")
                    .HasColumnType("boolean");

                b.HasIndex("NodeSetReferenceTypesModelUri", "NodeSetReferenceTypesPublicationDate");

                b.ToTable("ReferenceTypes", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.VariableTypeModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.BaseTypeModel");

                b.Property<string>("ArrayDimensions")
                    .HasColumnType("text");

                b.Property<string>("DataTypeNodeId")
                    .HasColumnType("text");

                b.Property<string>("DataTypeNodeSetModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("DataTypeNodeSetPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NodeSetVariableTypesModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetVariableTypesPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.Property<int?>("ValueRank")
                    .HasColumnType("integer");

                b.HasIndex("NodeSetVariableTypesModelUri", "NodeSetVariableTypesPublicationDate");

                b.HasIndex("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                b.ToTable("VariableTypes", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.InterfaceModel", b => {
                b.HasBaseType("CESMII.OpcUa.NodeSetModel.ObjectTypeModel");

                b.Property<string>("NodeSetInterfacesModelUri")
                    .HasColumnType("text");

                b.Property<DateTime?>("NodeSetInterfacesPublicationDate")
                    .HasColumnType("timestamp with time zone");

                b.HasIndex("NodeSetInterfacesModelUri", "NodeSetInterfacesPublicationDate");

                b.ToTable("Interfaces", (string)null);
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", "NodeSet")
                    .WithMany()
                    .HasForeignKey("NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                    .WithMany("UnknownNodes")
                    .HasForeignKey("NodeSetUnknownNodesModelUri", "NodeSetUnknownNodesPublicationDate");

                b.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "Description", b1 => {
                    b1.Property<string>("NodeModelNodeId")
                        .HasColumnType("text");

                    b1.Property<string>("NodeModelNodeSetModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime>("NodeModelNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                    b1.Property<string>("Locale")
                        .HasColumnType("text");

                    b1.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b1.HasKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate", "Id");

                    b1.ToTable("Nodes_Description");

                    b1.WithOwner()
                        .HasForeignKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");
                });

                b.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "DisplayName", b1 => {
                    b1.Property<string>("NodeModelNodeId")
                        .HasColumnType("text");

                    b1.Property<string>("NodeModelNodeSetModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime>("NodeModelNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                    b1.Property<string>("Locale")
                        .HasColumnType("text");

                    b1.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b1.HasKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate", "Id");

                    b1.ToTable("Nodes_DisplayName");

                    b1.WithOwner()
                        .HasForeignKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");
                });

                b.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+NodeAndReference", "OtherReferencedNodes", b1 => {
                    b1.Property<string>("OwnerNodeId")
                        .HasColumnType("text");

                    b1.Property<string>("OwnerModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime?>("OwnerPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                    b1.Property<string>("Reference")
                        .HasColumnType("text");

                    b1.Property<string>("ReferencedModelUri")
                        .HasColumnType("text");

                    b1.Property<string>("ReferencedNodeId")
                        .HasColumnType("text");

                    b1.Property<DateTime?>("ReferencedPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.HasKey("OwnerNodeId", "OwnerModelUri", "OwnerPublicationDate", "Id");

                    b1.HasIndex("ReferencedNodeId", "ReferencedModelUri", "ReferencedPublicationDate");

                    b1.ToTable("Nodes_OtherReferencedNodes");

                    b1.WithOwner()
                        .HasForeignKey("OwnerNodeId", "OwnerModelUri", "OwnerPublicationDate");

                    b1.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Node")
                        .WithMany()
                        .HasForeignKey("ReferencedNodeId", "ReferencedModelUri", "ReferencedPublicationDate");

                    b1.Navigation("Node");
                });

                b.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+NodeAndReference", "OtherReferencingNodes", b1 => {
                    b1.Property<string>("OwnerNodeId")
                        .HasColumnType("text");

                    b1.Property<string>("OwnerModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime?>("OwnerPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                    b1.Property<string>("Reference")
                        .HasColumnType("text");

                    b1.Property<string>("ReferencingModelUri")
                        .HasColumnType("text");

                    b1.Property<string>("ReferencingNodeId")
                        .HasColumnType("text");

                    b1.Property<DateTime?>("ReferencingPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.HasKey("OwnerNodeId", "OwnerModelUri", "OwnerPublicationDate", "Id");

                    b1.HasIndex("ReferencingNodeId", "ReferencingModelUri", "ReferencingPublicationDate");

                    b1.ToTable("Nodes_OtherReferencingNodes");

                    b1.WithOwner()
                        .HasForeignKey("OwnerNodeId", "OwnerModelUri", "OwnerPublicationDate");

                    b1.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Node")
                        .WithMany()
                        .HasForeignKey("ReferencingNodeId", "ReferencingModelUri", "ReferencingPublicationDate");

                    b1.Navigation("Node");
                });

                b.Navigation("Description");

                b.Navigation("DisplayName");

                b.Navigation("NodeSet");

                b.Navigation("OtherReferencedNodes");

                b.Navigation("OtherReferencingNodes");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeSetModel", b => {
                b.OwnsMany("CESMII.OpcUa.NodeSetModel.RequiredModelInfo", "RequiredModels", b1 => {
                    b1.Property<string>("DependentModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime>("DependentPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                    b1.Property<string>("AvailableModelModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime?>("AvailableModelPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<string>("ModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime?>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<string>("Version")
                        .HasColumnType("text");

                    b1.HasKey("DependentModelUri", "DependentPublicationDate", "Id");

                    b1.HasIndex("AvailableModelModelUri", "AvailableModelPublicationDate");

                    b1.ToTable("RequiredModelInfo");

                    b1.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", "AvailableModel")
                        .WithMany()
                        .HasForeignKey("AvailableModelModelUri", "AvailableModelPublicationDate");

                    b1.WithOwner()
                        .HasForeignKey("DependentModelUri", "DependentPublicationDate");

                    b1.Navigation("AvailableModel");
                });

                b.Navigation("RequiredModels");
            });

            modelBuilder.Entity("DataVariableModelNodeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.DataVariableModel", null)
                    .WithMany()
                    .HasForeignKey("DataVariablesNodeId", "DataVariablesNodeSetModelUri", "DataVariablesNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithMany()
                    .HasForeignKey("NodesWithDataVariablesNodeId", "NodesWithDataVariablesNodeSetModelUri", "NodesWithDataVariablesNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("InterfaceModelNodeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.InterfaceModel", null)
                    .WithMany()
                    .HasForeignKey("InterfacesNodeId", "InterfacesNodeSetModelUri", "InterfacesNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithMany()
                    .HasForeignKey("NodesWithInterfaceNodeId", "NodesWithInterfaceNodeSetModelUri", "NodesWithInterfaceNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("MethodModelNodeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.MethodModel", null)
                    .WithMany()
                    .HasForeignKey("MethodsNodeId", "MethodsNodeSetModelUri", "MethodsNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithMany()
                    .HasForeignKey("NodesWithMethodsNodeId", "NodesWithMethodsNodeSetModelUri", "NodesWithMethodsNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b => {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("NodeModelObjectModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithMany()
                    .HasForeignKey("NodesWithObjectsNodeId", "NodesWithObjectsNodeSetModelUri", "NodesWithObjectsNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.ObjectModel", null)
                    .WithMany()
                    .HasForeignKey("ObjectsNodeId", "ObjectsNodeSetModelUri", "ObjectsNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("NodeModelObjectTypeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", null)
                    .WithMany()
                    .HasForeignKey("EventsNodeId", "EventsNodeSetModelUri", "EventsNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithMany()
                    .HasForeignKey("NodesWithEventsNodeId", "NodesWithEventsNodeSetModelUri", "NodesWithEventsNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("NodeModelVariableModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithMany()
                    .HasForeignKey("NodesWithPropertiesNodeId", "NodesWithPropertiesNodeSetModelUri", "NodesWithPropertiesNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.VariableModel", null)
                    .WithMany()
                    .HasForeignKey("PropertiesNodeId", "PropertiesNodeSetModelUri", "PropertiesNodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.BaseTypeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "SuperType")
                    .WithMany()
                    .HasForeignKey("SuperTypeNodeId", "SuperTypeNodeSetModelUri", "SuperTypeNodeSetPublicationDate");

                b.Navigation("SuperType");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.MethodModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.MethodModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Parent")
                    .WithMany()
                    .HasForeignKey("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.MethodModel", "TypeDefinition")
                    .WithMany()
                    .HasForeignKey("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                b.Navigation("Parent");

                b.Navigation("TypeDefinition");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ObjectModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                    .WithMany("Objects")
                    .HasForeignKey("NodeSetObjectsModelUri", "NodeSetObjectsPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.ObjectModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Parent")
                    .WithMany()
                    .HasForeignKey("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", "TypeDefinition")
                    .WithMany()
                    .HasForeignKey("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                b.Navigation("Parent");

                b.Navigation("TypeDefinition");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.VariableModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "DataType")
                    .WithMany()
                    .HasForeignKey("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.VariableModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.VariableTypeModel", "TypeDefinition")
                    .WithMany()
                    .HasForeignKey("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                b.OwnsOne("CESMII.OpcUa.NodeSetModel.VariableModel+EngineeringUnitInfo", "EngineeringUnit", b1 => {
                    b1.Property<string>("VariableModelNodeId")
                        .HasColumnType("text");

                    b1.Property<string>("VariableModelNodeSetModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime>("VariableModelNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<string>("NamespaceUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b1.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b1.HasKey("VariableModelNodeId", "VariableModelNodeSetModelUri", "VariableModelNodeSetPublicationDate");

                    b1.ToTable("Variables");

                    b1.WithOwner()
                        .HasForeignKey("VariableModelNodeId", "VariableModelNodeSetModelUri", "VariableModelNodeSetPublicationDate");

                    b1.OwnsOne("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "Description", b2 => {
                        b2.Property<string>("EngineeringUnitInfoVariableModelNodeId")
                            .HasColumnType("text");

                        b2.Property<string>("EngineeringUnitInfoVariableModelNodeSetModelUri")
                            .HasColumnType("text");

                        b2.Property<DateTime>("EngineeringUnitInfoVariableModelNodeSetPublicationDate")
                            .HasColumnType("timestamp with time zone");

                        b2.Property<string>("Locale")
                            .HasColumnType("text");

                        b2.Property<string>("Text")
                            .IsRequired()
                            .HasColumnType("text");

                        b2.HasKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");

                        b2.ToTable("Variables");

                        b2.WithOwner()
                            .HasForeignKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");
                    });

                    b1.OwnsOne("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "DisplayName", b2 => {
                        b2.Property<string>("EngineeringUnitInfoVariableModelNodeId")
                            .HasColumnType("text");

                        b2.Property<string>("EngineeringUnitInfoVariableModelNodeSetModelUri")
                            .HasColumnType("text");

                        b2.Property<DateTime>("EngineeringUnitInfoVariableModelNodeSetPublicationDate")
                            .HasColumnType("timestamp with time zone");

                        b2.Property<string>("Locale")
                            .HasColumnType("text");

                        b2.Property<string>("Text")
                            .IsRequired()
                            .HasColumnType("text");

                        b2.HasKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");

                        b2.ToTable("Variables");

                        b2.WithOwner()
                            .HasForeignKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");
                    });

                    b1.Navigation("Description");

                    b1.Navigation("DisplayName");
                });

                b.Navigation("DataType");

                b.Navigation("EngineeringUnit");

                b.Navigation("TypeDefinition");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.DataTypeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                    .WithMany("DataTypes")
                    .HasForeignKey("NodeSetDataTypesModelUri", "NodeSetDataTypesPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.DataTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.OwnsMany("CESMII.OpcUa.NodeSetModel.DataTypeModel+StructureField", "StructureFields", b1 => {
                    b1.Property<string>("DataTypeModelNodeId")
                        .HasColumnType("text");

                    b1.Property<string>("DataTypeModelNodeSetModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime>("DataTypeModelNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                    b1.Property<string>("ArrayDimensions")
                        .HasColumnType("text");

                    b1.Property<string>("DataTypeNodeId")
                        .HasColumnType("text");

                    b1.Property<string>("DataTypeNodeSetModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime?>("DataTypeNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<int>("FieldOrder")
                        .HasColumnType("integer");

                    b1.Property<bool>("IsOptional")
                        .HasColumnType("boolean");

                    b1.Property<long?>("MaxStringLength")
                        .HasColumnType("bigint");

                    b1.Property<string>("Name")
                        .HasColumnType("text");

                    b1.Property<int?>("ValueRank")
                        .HasColumnType("integer");

                    b1.HasKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate", "Id");

                    b1.HasIndex("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                    b1.ToTable("StructureField");

                    b1.WithOwner()
                        .HasForeignKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate");

                    b1.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                    b1.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "Description", b2 => {
                        b2.Property<string>("StructureFieldDataTypeModelNodeId")
                            .HasColumnType("text");

                        b2.Property<string>("StructureFieldDataTypeModelNodeSetModelUri")
                            .HasColumnType("text");

                        b2.Property<DateTime>("StructureFieldDataTypeModelNodeSetPublicationDate")
                            .HasColumnType("timestamp with time zone");

                        b2.Property<int>("StructureFieldId")
                            .HasColumnType("integer");

                        b2.Property<int>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("integer");

                        NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                        b2.Property<string>("Locale")
                            .HasColumnType("text");

                        b2.Property<string>("Text")
                            .IsRequired()
                            .HasColumnType("text");

                        b2.HasKey("StructureFieldDataTypeModelNodeId", "StructureFieldDataTypeModelNodeSetModelUri", "StructureFieldDataTypeModelNodeSetPublicationDate", "StructureFieldId", "Id");

                        b2.ToTable("StructureField_Description");

                        b2.WithOwner()
                            .HasForeignKey("StructureFieldDataTypeModelNodeId", "StructureFieldDataTypeModelNodeSetModelUri", "StructureFieldDataTypeModelNodeSetPublicationDate", "StructureFieldId");
                    });

                    b1.Navigation("DataType");

                    b1.Navigation("Description");
                });

                b.OwnsMany("CESMII.OpcUa.NodeSetModel.DataTypeModel+UaEnumField", "EnumFields", b1 => {
                    b1.Property<string>("DataTypeModelNodeId")
                        .HasColumnType("text");

                    b1.Property<string>("DataTypeModelNodeSetModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime>("DataTypeModelNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                    b1.Property<string>("Name")
                        .HasColumnType("text");

                    b1.Property<long>("Value")
                        .HasColumnType("bigint");

                    b1.HasKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate", "Id");

                    b1.ToTable("UaEnumField");

                    b1.WithOwner()
                        .HasForeignKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate");

                    b1.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "Description", b2 => {
                        b2.Property<string>("UaEnumFieldDataTypeModelNodeId")
                            .HasColumnType("text");

                        b2.Property<string>("UaEnumFieldDataTypeModelNodeSetModelUri")
                            .HasColumnType("text");

                        b2.Property<DateTime>("UaEnumFieldDataTypeModelNodeSetPublicationDate")
                            .HasColumnType("timestamp with time zone");

                        b2.Property<int>("UaEnumFieldId")
                            .HasColumnType("integer");

                        b2.Property<int>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("integer");

                        NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                        b2.Property<string>("Locale")
                            .HasColumnType("text");

                        b2.Property<string>("Text")
                            .IsRequired()
                            .HasColumnType("text");

                        b2.HasKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId", "Id");

                        b2.ToTable("UaEnumField_Description");

                        b2.WithOwner()
                            .HasForeignKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId");
                    });

                    b1.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "DisplayName", b2 => {
                        b2.Property<string>("UaEnumFieldDataTypeModelNodeId")
                            .HasColumnType("text");

                        b2.Property<string>("UaEnumFieldDataTypeModelNodeSetModelUri")
                            .HasColumnType("text");

                        b2.Property<DateTime>("UaEnumFieldDataTypeModelNodeSetPublicationDate")
                            .HasColumnType("timestamp with time zone");

                        b2.Property<int>("UaEnumFieldId")
                            .HasColumnType("integer");

                        b2.Property<int>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("integer");

                        NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                        b2.Property<string>("Locale")
                            .HasColumnType("text");

                        b2.Property<string>("Text")
                            .IsRequired()
                            .HasColumnType("text");

                        b2.HasKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId", "Id");

                        b2.ToTable("UaEnumField_DisplayName");

                        b2.WithOwner()
                            .HasForeignKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId");
                    });

                    b1.Navigation("Description");

                    b1.Navigation("DisplayName");
                });

                b.Navigation("EnumFields");

                b.Navigation("StructureFields");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.DataVariableModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                    .WithMany("DataVariables")
                    .HasForeignKey("NodeSetDataVariablesModelUri", "NodeSetDataVariablesPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.VariableModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.DataVariableModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Parent")
                    .WithMany()
                    .HasForeignKey("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                b.Navigation("Parent");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                    .WithMany("ObjectTypes")
                    .HasForeignKey("NodeSetObjectTypesModelUri", "NodeSetObjectTypesPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.PropertyModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                    .WithMany("Properties")
                    .HasForeignKey("NodeSetPropertiesModelUri", "NodeSetPropertiesPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.VariableModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.PropertyModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Parent")
                    .WithMany()
                    .HasForeignKey("ParentNodeId", "ParentModelUri", "ParentPublicationDate");

                b.Navigation("Parent");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ReferenceTypeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                    .WithMany("ReferenceTypes")
                    .HasForeignKey("NodeSetReferenceTypesModelUri", "NodeSetReferenceTypesPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.ReferenceTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "InverseName", b1 => {
                    b1.Property<string>("ReferenceTypeModelNodeId")
                        .HasColumnType("text");

                    b1.Property<string>("ReferenceTypeModelNodeSetModelUri")
                        .HasColumnType("text");

                    b1.Property<DateTime>("ReferenceTypeModelNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b1.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                    b1.Property<string>("Locale")
                        .HasColumnType("text");

                    b1.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b1.HasKey("ReferenceTypeModelNodeId", "ReferenceTypeModelNodeSetModelUri", "ReferenceTypeModelNodeSetPublicationDate", "Id");

                    b1.ToTable("ReferenceTypes_InverseName");

                    b1.WithOwner()
                        .HasForeignKey("ReferenceTypeModelNodeId", "ReferenceTypeModelNodeSetModelUri", "ReferenceTypeModelNodeSetPublicationDate");
                });

                b.Navigation("InverseName");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.VariableTypeModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                    .WithMany("VariableTypes")
                    .HasForeignKey("NodeSetVariableTypesModelUri", "NodeSetVariableTypesPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "DataType")
                    .WithMany()
                    .HasForeignKey("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.VariableTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("DataType");
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.InterfaceModel", b => {
                b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                    .WithMany("Interfaces")
                    .HasForeignKey("NodeSetInterfacesModelUri", "NodeSetInterfacesPublicationDate");

                b.HasOne("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", null)
                    .WithOne()
                    .HasForeignKey("CESMII.OpcUa.NodeSetModel.InterfaceModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeSetModel", b => {
                b.Navigation("DataTypes");

                b.Navigation("DataVariables");

                b.Navigation("Interfaces");

                b.Navigation("ObjectTypes");

                b.Navigation("Objects");

                b.Navigation("Properties");

                b.Navigation("ReferenceTypes");

                b.Navigation("UnknownNodes");

                b.Navigation("VariableTypes");
            });
#pragma warning restore 612, 618
        }
    }
}
