// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Opc.Ua.Cloud.Library;

#nullable disable

namespace Opc.Ua.Cloud.Library
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220504171913_AddNodeSetModel")]
    partial class AddNodeSetModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeModel", b =>
                {
                    b.Property<string>("NodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BrowseName")
                        .HasColumnType("text");

                    b.Property<List<string>>("Categories")
                        .HasColumnType("text[]");

                    b.Property<string>("Documentation")
                        .HasColumnType("text");

                    b.Property<string>("Namespace")
                        .HasColumnType("text");

                    b.Property<string>("SymbolicName")
                        .HasColumnType("text");

                    b.HasKey("NodeId", "NodeSetModelUri", "NodeSetPublicationDate");

                    b.HasIndex("NodeSetModelUri", "NodeSetPublicationDate");

                    b.ToTable("Nodes", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeSetModel", b =>
                {
                    b.Property<string>("ModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("ModelUri", "PublicationDate");

                    b.ToTable("NodeSets", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DbContextModels.DatatypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("datatype_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrowseName")
                        .HasColumnType("text")
                        .HasColumnName("datatype_browsename");

                    b.Property<string>("NameSpace")
                        .HasColumnType("text")
                        .HasColumnName("datatype_namespace");

                    b.Property<long>("NodesetId")
                        .HasColumnType("bigint")
                        .HasColumnName("nodeset_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("datatype_value");

                    b.HasKey("Id");

                    b.ToTable("datatype");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DbContextModels.MetadataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("metadata_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("metadata_name");

                    b.Property<long>("NodesetId")
                        .HasColumnType("bigint")
                        .HasColumnName("nodeset_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("metadata_value");

                    b.HasKey("Id");

                    b.ToTable("metadata");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DbContextModels.ObjecttypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("objecttype_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrowseName")
                        .HasColumnType("text")
                        .HasColumnName("objecttype_browsename");

                    b.Property<string>("NameSpace")
                        .HasColumnType("text")
                        .HasColumnName("objecttype_namespace");

                    b.Property<long>("NodesetId")
                        .HasColumnType("bigint")
                        .HasColumnName("nodeset_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("objecttype_value");

                    b.HasKey("Id");

                    b.ToTable("objecttype");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DbContextModels.ReferencetypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("referencetype_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrowseName")
                        .HasColumnType("text")
                        .HasColumnName("referencetype_browsename");

                    b.Property<string>("NameSpace")
                        .HasColumnType("text")
                        .HasColumnName("referencetype_namespace");

                    b.Property<long>("NodesetId")
                        .HasColumnType("bigint")
                        .HasColumnName("nodeset_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("referencetype_value");

                    b.HasKey("Id");

                    b.ToTable("referencetype");
                });

            modelBuilder.Entity("Opc.Ua.Cloud.Library.DbContextModels.VariabletypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("variabletype_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrowseName")
                        .HasColumnType("text")
                        .HasColumnName("variabletype_browsename");

                    b.Property<string>("NameSpace")
                        .HasColumnType("text")
                        .HasColumnName("variabletype_namespace");

                    b.Property<long>("NodesetId")
                        .HasColumnType("bigint")
                        .HasColumnName("nodeset_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("variabletype_value");

                    b.HasKey("Id");

                    b.ToTable("variabletype");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.BaseTypeModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.NodeModel");

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("boolean");

                    b.Property<string>("SuperTypeNodeId")
                        .HasColumnType("text");

                    b.Property<string>("SuperTypeNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SuperTypeNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("SuperTypeNodeId", "SuperTypeNodeSetModelUri", "SuperTypeNodeSetPublicationDate");

                    b.ToTable("BaseTypes", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.MethodModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.NodeModel");

                    b.Property<string>("ModelingRule")
                        .HasColumnType("text");

                    b.Property<string>("ParentNodeId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ParentNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeDefinitionNodeId")
                        .HasColumnType("text");

                    b.Property<string>("TypeDefinitionNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TypeDefinitionNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ParentNodeId", "ParentNodeSetModelUri", "ParentNodeSetPublicationDate");

                    b.HasIndex("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                    b.ToTable("Methods", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ObjectModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.NodeModel");

                    b.Property<string>("ModelingRule")
                        .HasColumnType("text");

                    b.Property<string>("NodeSetModelModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetModelPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentNodeId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ParentNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeDefinitionNodeId")
                        .HasColumnType("text");

                    b.Property<string>("TypeDefinitionNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TypeDefinitionNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.HasIndex("ParentNodeId", "ParentNodeSetModelUri", "ParentNodeSetPublicationDate");

                    b.HasIndex("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                    b.ToTable("Objects", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.VariableModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.NodeModel");

                    b.Property<long?>("AccessLevel")
                        .HasColumnType("bigint");

                    b.Property<int?>("AccessRestrictions")
                        .HasColumnType("integer");

                    b.Property<string>("ArrayDimensions")
                        .HasColumnType("text");

                    b.Property<string>("DataTypeNodeId")
                        .HasColumnType("text");

                    b.Property<string>("DataTypeNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataTypeNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EngUnitNodeId")
                        .HasColumnType("text");

                    b.Property<long?>("EnumValue")
                        .HasColumnType("bigint");

                    b.Property<double?>("InstrumentMaxValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("InstrumentMinValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("MaxValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("MinValue")
                        .HasColumnType("double precision");

                    b.Property<string>("ModelingRule")
                        .HasColumnType("text");

                    b.Property<string>("ParentNodeId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ParentNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeDefinitionNodeId")
                        .HasColumnType("text");

                    b.Property<string>("TypeDefinitionNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TypeDefinitionNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserAccessLevel")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserWriteMask")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<int?>("ValueRank")
                        .HasColumnType("integer");

                    b.Property<long?>("WriteMask")
                        .HasColumnType("bigint");

                    b.HasIndex("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                    b.HasIndex("ParentNodeId", "ParentNodeSetModelUri", "ParentNodeSetPublicationDate");

                    b.HasIndex("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                    b.ToTable("Variables", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.DataTypeModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.BaseTypeModel");

                    b.Property<string>("NodeSetModelModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetModelPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.ToTable("DataTypes", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.DataVariableModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.VariableModel");

                    b.Property<string>("NodeModelNodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodeModelNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeModelNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NodeSetModelModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetModelPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.HasIndex("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");

                    b.ToTable("DataVariables", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.BaseTypeModel");

                    b.Property<string>("NodeModelNodeId")
                        .HasColumnType("text");

                    b.Property<string>("NodeModelNodeSetModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeModelNodeSetPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NodeSetModelModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetModelPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.HasIndex("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");

                    b.ToTable("ObjectTypes", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.PropertyModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.VariableModel");

                    b.Property<string>("NodeSetModelModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetModelPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.VariableTypeModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.BaseTypeModel");

                    b.Property<string>("NodeSetModelModelUri")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetModelPublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.ToTable("VariableTypes", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.InterfaceModel", b =>
                {
                    b.HasBaseType("CESMII.OpcUa.NodeSetModel.ObjectTypeModel");

                    b.Property<string>("NodeModelNodeId1")
                        .HasColumnType("text");

                    b.Property<string>("NodeModelNodeSetModelUri1")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeModelNodeSetPublicationDate1")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NodeSetModelModelUri1")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NodeSetModelPublicationDate1")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("NodeSetModelModelUri1", "NodeSetModelPublicationDate1");

                    b.HasIndex("NodeModelNodeId1", "NodeModelNodeSetModelUri1", "NodeModelNodeSetPublicationDate1");

                    b.ToTable("Interfaces", (string)null);
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", "NodeSet")
                        .WithMany("UnknownNodes")
                        .HasForeignKey("NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+ChildAndReference", "OtherChilden", b1 =>
                        {
                            b1.Property<string>("NodeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("NodeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("NodeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ChildNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("ChildNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ChildNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Reference")
                                .HasColumnType("text");

                            b1.HasKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate", "Id");

                            b1.HasIndex("ChildNodeId", "ChildNodeSetModelUri", "ChildNodeSetPublicationDate");

                            b1.ToTable("ChildAndReference");

                            b1.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Child")
                                .WithMany()
                                .HasForeignKey("ChildNodeId", "ChildNodeSetModelUri", "ChildNodeSetPublicationDate");

                            b1.WithOwner()
                                .HasForeignKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");

                            b1.Navigation("Child");
                        });

                    b.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "Description", b1 =>
                        {
                            b1.Property<string>("NodeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("NodeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("NodeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Locale")
                                .HasColumnType("text");

                            b1.Property<string>("Text")
                                .HasColumnType("text");

                            b1.HasKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate", "Id");

                            b1.ToTable("Nodes_Description");

                            b1.WithOwner()
                                .HasForeignKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");
                        });

                    b.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "DisplayName", b1 =>
                        {
                            b1.Property<string>("NodeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("NodeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("NodeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Locale")
                                .HasColumnType("text");

                            b1.Property<string>("Text")
                                .HasColumnType("text");

                            b1.HasKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate", "Id");

                            b1.ToTable("Nodes_DisplayName");

                            b1.WithOwner()
                                .HasForeignKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");
                        });

                    b.Navigation("Description");

                    b.Navigation("DisplayName");

                    b.Navigation("NodeSet");

                    b.Navigation("OtherChilden");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeSetModel", b =>
                {
                    b.OwnsMany("CESMII.OpcUa.NodeSetModel.RequiredModelInfo", "RequiredModels", b1 =>
                        {
                            b1.Property<string>("NodeSetModelModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("NodeSetModelPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime?>("ModelPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModelUri")
                                .HasColumnType("text");

                            b1.Property<string>("ModelUri1")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("PublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Version")
                                .HasColumnType("text");

                            b1.HasKey("NodeSetModelModelUri", "NodeSetModelPublicationDate", "Id");

                            b1.HasIndex("ModelUri1", "ModelPublicationDate");

                            b1.ToTable("RequiredModelInfo");

                            b1.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", "Model")
                                .WithMany()
                                .HasForeignKey("ModelUri1", "ModelPublicationDate");

                            b1.WithOwner()
                                .HasForeignKey("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                            b1.Navigation("Model");
                        });

                    b.Navigation("RequiredModels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.BaseTypeModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "SuperType")
                        .WithMany()
                        .HasForeignKey("SuperTypeNodeId", "SuperTypeNodeSetModelUri", "SuperTypeNodeSetPublicationDate");

                    b.Navigation("SuperType");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.MethodModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.MethodModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Parent")
                        .WithMany("Methods")
                        .HasForeignKey("ParentNodeId", "ParentNodeSetModelUri", "ParentNodeSetPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "TypeDefinition")
                        .WithMany()
                        .HasForeignKey("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                    b.Navigation("Parent");

                    b.Navigation("TypeDefinition");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ObjectModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                        .WithMany("Objects")
                        .HasForeignKey("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.ObjectModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Parent")
                        .WithMany("Objects")
                        .HasForeignKey("ParentNodeId", "ParentNodeSetModelUri", "ParentNodeSetPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", "TypeDefinition")
                        .WithMany()
                        .HasForeignKey("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                    b.Navigation("Parent");

                    b.Navigation("TypeDefinition");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.VariableModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.VariableModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", "Parent")
                        .WithMany("Properties")
                        .HasForeignKey("ParentNodeId", "ParentNodeSetModelUri", "ParentNodeSetPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.VariableTypeModel", "TypeDefinition")
                        .WithMany()
                        .HasForeignKey("TypeDefinitionNodeId", "TypeDefinitionNodeSetModelUri", "TypeDefinitionNodeSetPublicationDate");

                    b.OwnsOne("CESMII.OpcUa.NodeSetModel.VariableModel+EngineeringUnitInfo", "EngineeringUnit", b1 =>
                        {
                            b1.Property<string>("VariableModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("VariableModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("VariableModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("NamespaceUri")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int?>("UnitId")
                                .HasColumnType("integer");

                            b1.HasKey("VariableModelNodeId", "VariableModelNodeSetModelUri", "VariableModelNodeSetPublicationDate");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableModelNodeId", "VariableModelNodeSetModelUri", "VariableModelNodeSetPublicationDate");

                            b1.OwnsOne("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "Description", b2 =>
                                {
                                    b2.Property<string>("EngineeringUnitInfoVariableModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("EngineeringUnitInfoVariableModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("EngineeringUnitInfoVariableModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .HasColumnType("text");

                                    b2.HasKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");

                                    b2.ToTable("Variables");

                                    b2.WithOwner()
                                        .HasForeignKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");
                                });

                            b1.OwnsOne("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "DisplayName", b2 =>
                                {
                                    b2.Property<string>("EngineeringUnitInfoVariableModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("EngineeringUnitInfoVariableModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("EngineeringUnitInfoVariableModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .HasColumnType("text");

                                    b2.HasKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");

                                    b2.ToTable("Variables");

                                    b2.WithOwner()
                                        .HasForeignKey("EngineeringUnitInfoVariableModelNodeId", "EngineeringUnitInfoVariableModelNodeSetModelUri", "EngineeringUnitInfoVariableModelNodeSetPublicationDate");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("DisplayName");
                        });

                    b.Navigation("DataType");

                    b.Navigation("EngineeringUnit");

                    b.Navigation("Parent");

                    b.Navigation("TypeDefinition");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.DataTypeModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                        .WithMany("DataTypes")
                        .HasForeignKey("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.DataTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("CESMII.OpcUa.NodeSetModel.DataTypeModel+StructureField", "StructureFields", b1 =>
                        {
                            b1.Property<string>("DataTypeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("DataTypeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("DataTypeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DataTypeNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("DataTypeNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("DataTypeNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("IsOptional")
                                .HasColumnType("boolean");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.HasKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate", "Id");

                            b1.HasIndex("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                            b1.ToTable("StructureField");

                            b1.WithOwner()
                                .HasForeignKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate");

                            b1.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", "DataType")
                                .WithMany()
                                .HasForeignKey("DataTypeNodeId", "DataTypeNodeSetModelUri", "DataTypeNodeSetPublicationDate");

                            b1.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "Description", b2 =>
                                {
                                    b2.Property<string>("StructureFieldDataTypeModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("StructureFieldDataTypeModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("StructureFieldDataTypeModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<int>("StructureFieldId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .HasColumnType("text");

                                    b2.HasKey("StructureFieldDataTypeModelNodeId", "StructureFieldDataTypeModelNodeSetModelUri", "StructureFieldDataTypeModelNodeSetPublicationDate", "StructureFieldId", "Id");

                                    b2.ToTable("StructureField_Description");

                                    b2.WithOwner()
                                        .HasForeignKey("StructureFieldDataTypeModelNodeId", "StructureFieldDataTypeModelNodeSetModelUri", "StructureFieldDataTypeModelNodeSetPublicationDate", "StructureFieldId");
                                });

                            b1.Navigation("DataType");

                            b1.Navigation("Description");
                        });

                    b.OwnsMany("CESMII.OpcUa.NodeSetModel.DataTypeModel+UaEnumField", "EnumFields", b1 =>
                        {
                            b1.Property<string>("DataTypeModelNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("DataTypeModelNodeSetModelUri")
                                .HasColumnType("text");

                            b1.Property<DateTime>("DataTypeModelNodeSetPublicationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint");

                            b1.HasKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate", "Id");

                            b1.ToTable("UaEnumField");

                            b1.WithOwner()
                                .HasForeignKey("DataTypeModelNodeId", "DataTypeModelNodeSetModelUri", "DataTypeModelNodeSetPublicationDate");

                            b1.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "Description", b2 =>
                                {
                                    b2.Property<string>("UaEnumFieldDataTypeModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("UaEnumFieldDataTypeModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("UaEnumFieldDataTypeModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<int>("UaEnumFieldId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .HasColumnType("text");

                                    b2.HasKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId", "Id");

                                    b2.ToTable("UaEnumField_Description");

                                    b2.WithOwner()
                                        .HasForeignKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId");
                                });

                            b1.OwnsMany("CESMII.OpcUa.NodeSetModel.NodeModel+LocalizedText", "DisplayName", b2 =>
                                {
                                    b2.Property<string>("UaEnumFieldDataTypeModelNodeId")
                                        .HasColumnType("text");

                                    b2.Property<string>("UaEnumFieldDataTypeModelNodeSetModelUri")
                                        .HasColumnType("text");

                                    b2.Property<DateTime>("UaEnumFieldDataTypeModelNodeSetPublicationDate")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<int>("UaEnumFieldId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Locale")
                                        .HasColumnType("text");

                                    b2.Property<string>("Text")
                                        .HasColumnType("text");

                                    b2.HasKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId", "Id");

                                    b2.ToTable("UaEnumField_DisplayName");

                                    b2.WithOwner()
                                        .HasForeignKey("UaEnumFieldDataTypeModelNodeId", "UaEnumFieldDataTypeModelNodeSetModelUri", "UaEnumFieldDataTypeModelNodeSetPublicationDate", "UaEnumFieldId");
                                });

                            b1.Navigation("Description");

                            b1.Navigation("DisplayName");
                        });

                    b.Navigation("EnumFields");

                    b.Navigation("StructureFields");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.DataVariableModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                        .WithMany("DataVariables")
                        .HasForeignKey("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.VariableModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.DataVariableModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                        .WithMany("DataVariables")
                        .HasForeignKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                        .WithMany("ObjectTypes")
                        .HasForeignKey("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                        .WithMany("Events")
                        .HasForeignKey("NodeModelNodeId", "NodeModelNodeSetModelUri", "NodeModelNodeSetPublicationDate");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.PropertyModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                        .WithMany("Properties")
                        .HasForeignKey("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.VariableModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.PropertyModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.VariableTypeModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                        .WithMany("VariableTypes")
                        .HasForeignKey("NodeSetModelModelUri", "NodeSetModelPublicationDate");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.BaseTypeModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.VariableTypeModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.InterfaceModel", b =>
                {
                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeSetModel", null)
                        .WithMany("Interfaces")
                        .HasForeignKey("NodeSetModelModelUri1", "NodeSetModelPublicationDate1");

                    b.HasOne("CESMII.OpcUa.NodeSetModel.ObjectTypeModel", null)
                        .WithOne()
                        .HasForeignKey("CESMII.OpcUa.NodeSetModel.InterfaceModel", "NodeId", "NodeSetModelUri", "NodeSetPublicationDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CESMII.OpcUa.NodeSetModel.NodeModel", null)
                        .WithMany("Interfaces")
                        .HasForeignKey("NodeModelNodeId1", "NodeModelNodeSetModelUri1", "NodeModelNodeSetPublicationDate1");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeModel", b =>
                {
                    b.Navigation("DataVariables");

                    b.Navigation("Events");

                    b.Navigation("Interfaces");

                    b.Navigation("Methods");

                    b.Navigation("Objects");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CESMII.OpcUa.NodeSetModel.NodeSetModel", b =>
                {
                    b.Navigation("DataTypes");

                    b.Navigation("DataVariables");

                    b.Navigation("Interfaces");

                    b.Navigation("ObjectTypes");

                    b.Navigation("Objects");

                    b.Navigation("Properties");

                    b.Navigation("UnknownNodes");

                    b.Navigation("VariableTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
